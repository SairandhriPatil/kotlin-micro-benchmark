public class de.fraunhofer.iem.collections.iterators.listIterable.Main extends java.lang.Object
{

    public void <init>()
    {
        de.fraunhofer.iem.collections.iterators.listIterable.Main this;

        this := @this: de.fraunhofer.iem.collections.iterators.listIterable.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;
        java.lang.String[] args;
        java.util.ArrayList $stack2;

        args := @parameter0: java.lang.String[];

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>("Ranjith");

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>("K");

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void printForward(java.util.List)>($stack2);

        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void appendSuffix(java.util.List)>($stack2);

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void printForward(java.util.List)>($stack2);

        $stack8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack8.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void printBackward(java.util.List)>($stack2);

        $stack10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack10.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void addMarker(java.util.List)>($stack2);

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void printForward(java.util.List)>($stack2);

        $stack12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack12.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void removeMarker(java.util.List)>($stack2);

        $stack13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack13.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        staticinvoke <de.fraunhofer.iem.collections.iterators.listIterable.Main: void printForward(java.util.List)>($stack2);

        $stack14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack14.<java.io.PrintStream: void println(java.lang.String)>("***********************************************");

        return;
    }

    private static void appendSuffix(java.util.List)
    {
        java.util.ListIterator $stack3;
        java.util.List lst;
        java.lang.Object $stack5;
        java.lang.StringBuilder $stack6, $stack7, $stack8;
        java.lang.String elem, $stack9;
        boolean $stack4;

        lst := @parameter0: java.util.List;

        $stack3 = interfaceinvoke lst.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.ListIterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        $stack5 = interfaceinvoke $stack3.<java.util.ListIterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack5;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(elem);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-MARKER");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack3.<java.util.ListIterator: void set(java.lang.Object)>($stack9);

        goto label1;

     label2:
        return;
    }

    private static void printForward(java.util.List)
    {
        java.io.PrintStream $stack7;
        java.util.ListIterator $stack3;
        java.util.List lst;
        int $stack11;
        java.lang.Object $stack5;
        java.lang.StringBuilder $stack6, $stack8, $stack9, $stack10, $stack12;
        java.lang.String elem, $stack13;
        boolean $stack4;

        lst := @parameter0: java.util.List;

        $stack3 = interfaceinvoke lst.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.ListIterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        $stack5 = interfaceinvoke $stack3.<java.util.ListIterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack5;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element = \"");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(elem);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\t:\tNextIndex = ");

        $stack11 = interfaceinvoke $stack3.<java.util.ListIterator: int nextIndex()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.String)>($stack13);

        goto label1;

     label2:
        return;
    }

    private static void printBackward(java.util.List)
    {
        java.io.PrintStream $stack8;
        java.util.ListIterator $stack3;
        java.util.List lst;
        int $stack12;
        java.lang.Object $stack6;
        java.lang.StringBuilder $stack7, $stack9, $stack10, $stack11, $stack13;
        java.lang.String elem, $stack14;
        boolean $stack4, $stack5;

        lst := @parameter0: java.util.List;

        $stack3 = interfaceinvoke lst.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.ListIterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        interfaceinvoke $stack3.<java.util.ListIterator: java.lang.Object next()>();

        goto label1;

     label2:
        $stack5 = interfaceinvoke $stack3.<java.util.ListIterator: boolean hasPrevious()>();

        if $stack5 == 0 goto label3;

        $stack6 = interfaceinvoke $stack3.<java.util.ListIterator: java.lang.Object previous()>();

        elem = (java.lang.String) $stack6;

        $stack8 = <java.lang.System: java.io.PrintStream out>;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element = \"");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(elem);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\t:\tPreviousIndex = ");

        $stack12 = interfaceinvoke $stack3.<java.util.ListIterator: int previousIndex()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack8.<java.io.PrintStream: void println(java.lang.String)>($stack14);

        goto label2;

     label3:
        return;
    }

    private static void addMarker(java.util.List)
    {
        java.util.List lst;
        java.util.ListIterator $stack3;
        java.lang.Object $stack5;
        java.lang.String elem;
        boolean $stack4, $stack6;

        lst := @parameter0: java.util.List;

        $stack3 = interfaceinvoke lst.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.ListIterator: boolean hasNext()>();

        if $stack4 == 0 goto label3;

        $stack5 = interfaceinvoke $stack3.<java.util.ListIterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack5;

        $stack6 = virtualinvoke elem.<java.lang.String: boolean equals(java.lang.Object)>("MARKER");

        if $stack6 != 0 goto label2;

        interfaceinvoke $stack3.<java.util.ListIterator: void add(java.lang.Object)>("MARKER");

     label2:
        goto label1;

     label3:
        return;
    }

    private static void removeMarker(java.util.List)
    {
        java.util.List lst;
        java.util.ListIterator $stack3;
        java.lang.Object $stack5;
        java.lang.String elem;
        boolean $stack4, $stack6;

        lst := @parameter0: java.util.List;

        $stack3 = interfaceinvoke lst.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.ListIterator: boolean hasNext()>();

        if $stack4 == 0 goto label3;

        $stack5 = interfaceinvoke $stack3.<java.util.ListIterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack5;

        $stack6 = virtualinvoke elem.<java.lang.String: boolean equals(java.lang.Object)>("MARKER");

        if $stack6 == 0 goto label2;

        interfaceinvoke $stack3.<java.util.ListIterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }
}
