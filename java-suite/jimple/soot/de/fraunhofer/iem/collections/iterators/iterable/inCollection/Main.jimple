public class de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main extends java.lang.Object
{

    public void <init>()
    {
        de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main this;

        this := @this: de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static void withIterators(java.util.Collection)
    {
        java.io.PrintStream $stack6;
        java.util.Iterator $stack3;
        java.util.Collection collection;
        java.lang.Object $stack5;
        java.lang.String elem;
        boolean $stack4;

        collection := @parameter0: java.util.Collection;

        $stack3 = interfaceinvoke collection.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        $stack5 = interfaceinvoke $stack3.<java.util.Iterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack5;

        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.String)>(elem);

        goto label1;

     label2:
        return;
    }

    private static void withFor(java.util.Collection)
    {
        java.io.PrintStream $stack6;
        java.util.Iterator $stack3;
        java.util.Collection collection;
        java.lang.Object $stack5;
        java.lang.String elem;
        boolean $stack4;

        collection := @parameter0: java.util.Collection;

        $stack3 = interfaceinvoke collection.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack4 = interfaceinvoke $stack3.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        $stack5 = interfaceinvoke $stack3.<java.util.Iterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack5;

        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.String)>(elem);

        goto label1;

     label2:
        return;
    }

    private static void withForEach(java.util.Collection)
    {
        java.util.function.Consumer $stack1;
        java.util.Collection collection;

        collection := @parameter0: java.util.Collection;

        $stack1 = staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main$lambda_withForEach_0__1: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke collection.<java.util.Collection: void forEach(java.util.function.Consumer)>($stack1);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.util.HashSet $stack4;
        java.lang.String[] args;
        de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main$1 $stack3;

        args := @parameter0: java.lang.String[];

        $stack3 = new de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main$1;

        specialinvoke $stack3.<de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main$1: void <init>()>();

        $stack4 = new java.util.HashSet;

        specialinvoke $stack4.<java.util.HashSet: void <init>(java.util.Collection)>($stack3);

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main: void withIterators(java.util.Collection)>($stack3);

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main: void withIterators(java.util.Collection)>($stack4);

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main: void withFor(java.util.Collection)>($stack3);

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main: void withFor(java.util.Collection)>($stack4);

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main: void withForEach(java.util.Collection)>($stack3);

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.Main: void withForEach(java.util.Collection)>($stack4);

        return;
    }

    public static void lambda$withForEach$0(java.lang.String)
    {
        java.io.PrintStream $stack3;
        java.lang.String it, $stack2;

        it := @parameter0: java.lang.String;

        $stack2 = virtualinvoke it.<java.lang.String: java.lang.String toUpperCase()>();

        $stack3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack3.<java.io.PrintStream: void println(java.lang.String)>($stack2);

        return;
    }
}
