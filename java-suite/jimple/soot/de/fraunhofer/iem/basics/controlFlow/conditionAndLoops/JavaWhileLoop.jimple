public class de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaWhileLoop extends java.lang.Object
{

    public void <init>()
    {
        de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaWhileLoop this;

        this := @this: de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaWhileLoop;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaWhileLoop: void whileExample(int)>(0);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaWhileLoop: void whileExample(int)>(5);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaWhileLoop: void whileExample(int)>(15);

        return;
    }

    private static void whileExample(int)
    {
        java.io.PrintStream $stack1;
        int end;

        end := @parameter0: int;

     label1:
        if end >= 10 goto label2;

        $stack1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack1.<java.io.PrintStream: void println(int)>(end);

        end = end + 1;

        goto label1;

     label2:
        return;
    }
}
