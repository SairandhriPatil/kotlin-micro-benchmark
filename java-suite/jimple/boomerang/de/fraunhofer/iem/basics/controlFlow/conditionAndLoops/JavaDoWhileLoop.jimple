public class de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaDoWhileLoop extends java.lang.Object
{

    public void <init>()
    {
        de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaDoWhileLoop this;

        nop;

        this := @this: de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaDoWhileLoop;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        int varReplacer0, varReplacer1, varReplacer2;
        java.lang.String[] args;

        nop;

        args := @parameter0: java.lang.String[];

        varReplacer2 = 0;

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaDoWhileLoop: void doWhileExample(int)>(varReplacer2);

        varReplacer0 = 5;

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaDoWhileLoop: void doWhileExample(int)>(varReplacer0);

        varReplacer1 = 15;

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.JavaDoWhileLoop: void doWhileExample(int)>(varReplacer1);

        return;
    }

    private static void doWhileExample(int)
    {
        java.io.PrintStream $stack1;
        int end;

        nop;

        end := @parameter0: int;

     label1:
        nop;

        $stack1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack1.<java.io.PrintStream: void println(int)>(end);

        end = end + 1;

        if end < 10 goto label1;

        nop;

        return;
    }
}
