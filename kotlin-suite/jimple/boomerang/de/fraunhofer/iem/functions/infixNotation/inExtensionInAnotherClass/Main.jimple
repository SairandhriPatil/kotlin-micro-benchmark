public final class de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main extends java.lang.Object
{
    private final java.lang.String appName;

    public void <init>()
    {
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        java.lang.String varReplacer1811;

        nop;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        varReplacer1811 = "MyApp";

        this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName> = varReplacer1811;

        return;
    }

    public final de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt add(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)
    {
        java.io.PrintStream $stack5, $stack7, $stack9;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt $this$add, secondNumber, $stack10;
        int $stack6, $stack8, $stack11, $stack12, $stack13;
        java.lang.String l3, varReplacer1812, varReplacer1813;

        nop;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        $this$add := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        secondNumber := @parameter1: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        varReplacer1813 = "<this>";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($this$add, varReplacer1813);

        varReplacer1812 = "secondNumber";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(secondNumber, varReplacer1812);

        l3 = this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName>;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>(l3);

        $stack6 = virtualinvoke $this$add.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        $stack8 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(int)>($stack8);

        $stack10 = new de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        $stack11 = virtualinvoke $this$add.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack12 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack13 = $stack11 + $stack12;

        specialinvoke $stack10.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: void <init>(int)>($stack13);

        return $stack10;
    }

    public final java.lang.Integer add(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.examplesForReport.extensions.function.Employee)
    {
        java.io.PrintStream $stack5, $stack7;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt $this$add;
        de.fraunhofer.iem.examplesForReport.extensions.function.Employee secondNumber;
        null_type varReplacer1816;
        int $stack6;
        java.lang.String l3, varReplacer1814, varReplacer1815;

        nop;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        $this$add := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        secondNumber := @parameter1: de.fraunhofer.iem.examplesForReport.extensions.function.Employee;

        varReplacer1815 = "<this>";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($this$add, varReplacer1815);

        varReplacer1814 = "secondNumber";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(secondNumber, varReplacer1814);

        l3 = this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName>;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>(l3);

        $stack6 = virtualinvoke $this$add.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        varReplacer1816 = null;

        return varReplacer1816;
    }

    public final de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt sub(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)
    {
        java.io.PrintStream $stack5, $stack7, $stack9;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt $this$sub, secondNumber, $stack10;
        int $stack6, $stack8, $stack11, $stack12, $stack13;
        java.lang.String l3, varReplacer1817, varReplacer1818;

        nop;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        $this$sub := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        secondNumber := @parameter1: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        varReplacer1818 = "<this>";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($this$sub, varReplacer1818);

        varReplacer1817 = "secondNumber";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(secondNumber, varReplacer1817);

        l3 = this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName>;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>(l3);

        $stack6 = virtualinvoke $this$sub.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        $stack8 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(int)>($stack8);

        $stack10 = new de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        $stack11 = virtualinvoke $this$sub.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack12 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack13 = $stack11 - $stack12;

        specialinvoke $stack10.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: void <init>(int)>($stack13);

        return $stack10;
    }

    public final void addAndSub(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)
    {
        java.io.PrintStream $stack7, $stack10;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt num1, num2, $stack5, $stack8;
        int $stack6, $stack9;
        java.lang.String varReplacer1819, varReplacer1820;

        nop;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        num1 := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        num2 := @parameter1: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        varReplacer1819 = "num1";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(num1, varReplacer1819);

        varReplacer1820 = "num2";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(num2, varReplacer1820);

        $stack5 = virtualinvoke this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt add(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt,de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)>(num1, num2);

        $stack6 = virtualinvoke $stack5.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        $stack8 = virtualinvoke this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt sub(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt,de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)>(num1, num2);

        $stack9 = virtualinvoke $stack8.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack10.<java.io.PrintStream: void println(int)>($stack9);

        return;
    }
}
