public final class de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt extends java.lang.Object
{

    public static final void main()
    {
        java.util.Iterator $stack4, $stack7, $stack8;
        java.util.ListIterator $stack5, $stack6;
        java.lang.String[] l1;
        java.lang.Iterable $stack3, $stack9;
        java.util.List $stack2;
        java.lang.String varReplacer1189, varReplacer1190;

        nop;

        l1 = newarray (java.lang.String)[2];

        varReplacer1189 = "Ranjith";

        l1[0] = varReplacer1189;

        varReplacer1190 = "K";

        l1[1] = varReplacer1190;

        $stack2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>(l1);

        $stack3 = (java.lang.Iterable) $stack2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeIterable(java.lang.Iterable)>($stack3);

        $stack4 = interfaceinvoke $stack2.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeIterator(java.util.Iterator)>($stack4);

        $stack5 = interfaceinvoke $stack2.<java.util.List: java.util.ListIterator listIterator()>();

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeListIterator(java.util.ListIterator)>($stack5);

        $stack6 = interfaceinvoke $stack2.<java.util.List: java.util.ListIterator listIterator()>();

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeMutableListIterator(java.util.ListIterator)>($stack6);

        $stack7 = interfaceinvoke $stack2.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeIterator(java.util.Iterator)>($stack7);

        $stack8 = interfaceinvoke $stack2.<java.util.List: java.util.Iterator iterator()>();

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeMutableIterator(java.util.Iterator)>($stack8);

        $stack9 = (java.lang.Iterable) $stack2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void takeMutableIterable(java.lang.Iterable)>($stack9);

        return;
    }

    public static final void takeIterator(java.util.Iterator)
    {
        java.io.PrintStream $stack5;
        java.util.Iterator itr;
        java.lang.Object $stack4;
        java.lang.String varReplacer1191;
        boolean $stack3;

        nop;

        itr := @parameter0: java.util.Iterator;

        varReplacer1191 = "itr";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(itr, varReplacer1191);

     label1:
        $stack3 = interfaceinvoke itr.<java.util.Iterator: boolean hasNext()>();

        if $stack3 == 0 goto label2;

        nop;

        $stack4 = interfaceinvoke itr.<java.util.Iterator: java.lang.Object next()>();

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>($stack4);

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void takeIterable(java.lang.Iterable)
    {
        java.io.PrintStream $stack7;
        java.util.Iterator $stack4;
        java.lang.Object $stack6;
        java.lang.String varReplacer1192;
        java.lang.Iterable iterable;
        boolean $stack5;

        nop;

        iterable := @parameter0: java.lang.Iterable;

        varReplacer1192 = "iterable";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(iterable, varReplacer1192);

        $stack4 = interfaceinvoke iterable.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke $stack4.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        nop;

        $stack6 = interfaceinvoke $stack4.<java.util.Iterator: java.lang.Object next()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>($stack6);

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void takeListIterator(java.util.ListIterator)
    {
        java.io.PrintStream $stack5;
        java.util.ListIterator itr;
        java.lang.Object $stack4;
        java.lang.String varReplacer1193;
        boolean $stack3;

        nop;

        itr := @parameter0: java.util.ListIterator;

        varReplacer1193 = "itr";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(itr, varReplacer1193);

     label1:
        $stack3 = interfaceinvoke itr.<java.util.ListIterator: boolean hasNext()>();

        if $stack3 == 0 goto label2;

        nop;

        $stack4 = interfaceinvoke itr.<java.util.ListIterator: java.lang.Object next()>();

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>($stack4);

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void takeMutableIterator(java.util.Iterator)
    {
        java.util.Iterator itr;
        java.lang.Object $stack2;
        java.lang.String varReplacer1194, varReplacer1195;
        boolean $stack3, $stack1;

        nop;

        itr := @parameter0: java.util.Iterator;

        varReplacer1194 = "itr";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(itr, varReplacer1194);

     label1:
        nop;

        $stack1 = interfaceinvoke itr.<java.util.Iterator: boolean hasNext()>();

        if $stack1 == 0 goto label2;

        nop;

        $stack2 = interfaceinvoke itr.<java.util.Iterator: java.lang.Object next()>();

        varReplacer1195 = "MARKER";

        $stack3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($stack2, varReplacer1195);

        if $stack3 == 0 goto label1;

        nop;

        interfaceinvoke itr.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void takeMutableIterable(java.lang.Iterable)
    {
        java.util.Iterator $stack2;
        java.lang.Object $stack4;
        java.lang.String varReplacer1196, varReplacer1197;
        java.lang.Iterable iterable;
        boolean $stack5, $stack3;

        nop;

        iterable := @parameter0: java.lang.Iterable;

        varReplacer1197 = "iterable";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(iterable, varReplacer1197);

        $stack2 = interfaceinvoke iterable.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        nop;

        $stack3 = interfaceinvoke $stack2.<java.util.Iterator: boolean hasNext()>();

        if $stack3 == 0 goto label2;

        nop;

        $stack4 = interfaceinvoke $stack2.<java.util.Iterator: java.lang.Object next()>();

        varReplacer1196 = "MARKER";

        $stack5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($stack4, varReplacer1196);

        if $stack5 == 0 goto label1;

        nop;

        interfaceinvoke $stack2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void takeMutableListIterator(java.util.ListIterator)
    {
        java.util.ListIterator itr;
        java.lang.Object $stack3;
        java.lang.String elem, $stack4, varReplacer1198, varReplacer1199, varReplacer1200, varReplacer1201;
        boolean $stack5, $stack2;

        nop;

        itr := @parameter0: java.util.ListIterator;

        varReplacer1201 = "itr";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(itr, varReplacer1201);

     label1:
        nop;

        $stack2 = interfaceinvoke itr.<java.util.ListIterator: boolean hasNext()>();

        if $stack2 == 0 goto label2;

        nop;

        $stack3 = interfaceinvoke itr.<java.util.ListIterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack3;

        varReplacer1200 = "-MARKER";

        $stack4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(elem, varReplacer1200);

        interfaceinvoke itr.<java.util.ListIterator: void set(java.lang.Object)>($stack4);

        varReplacer1199 = "MARKER";

        $stack5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(elem, varReplacer1199);

        if $stack5 != 0 goto label1;

        nop;

        varReplacer1198 = "MARKER";

        interfaceinvoke itr.<java.util.ListIterator: void add(java.lang.Object)>(varReplacer1198);

        goto label1;

     label2:
        nop;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;

        nop;

        args := @parameter0: java.lang.String[];

        staticinvoke <de.fraunhofer.iem.collections.iterators.inFunctionSignatureAndProperty.MainKt: void main()>();

        return;
    }
}
