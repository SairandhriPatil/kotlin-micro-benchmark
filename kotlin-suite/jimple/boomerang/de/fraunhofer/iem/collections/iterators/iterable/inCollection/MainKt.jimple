public final class de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt extends java.lang.Object
{

    private static final void withIterators(java.util.Collection)
    {
        java.io.PrintStream $stack7;
        java.util.Iterator $stack4;
        java.util.Collection collection;
        java.lang.Object $stack6;
        java.lang.String elem;
        boolean $stack5;

        nop;

        collection := @parameter0: java.util.Collection;

        $stack4 = interfaceinvoke collection.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke $stack4.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        nop;

        $stack6 = interfaceinvoke $stack4.<java.util.Iterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack6;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>(elem);

        goto label1;

     label2:
        nop;

        return;
    }

    private static final void withFor(java.util.Collection)
    {
        java.io.PrintStream $stack7;
        java.util.Iterator $stack4;
        java.util.Collection collection;
        java.lang.Object $stack6;
        java.lang.String elem;
        boolean $stack5;

        nop;

        collection := @parameter0: java.util.Collection;

        $stack4 = interfaceinvoke collection.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke $stack4.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        nop;

        $stack6 = interfaceinvoke $stack4.<java.util.Iterator: java.lang.Object next()>();

        elem = (java.lang.String) $stack6;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>(elem);

        goto label1;

     label2:
        nop;

        return;
    }

    private static final void withForEach(java.util.Collection)
    {
        java.io.PrintStream $stack15;
        java.util.Iterator $stack10;
        java.util.Collection collection;
        java.lang.Iterable $this$forEach$iv;
        java.lang.NullPointerException $stack17;
        java.util.Locale $stack13;
        java.lang.Object $stack12;
        java.lang.String it, $stack14, varReplacer1210, varReplacer1211;
        boolean $stack11;

        nop;

        collection := @parameter0: java.util.Collection;

        $this$forEach$iv = (java.lang.Iterable) collection;

        $stack10 = interfaceinvoke $this$forEach$iv.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke $stack10.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label3;

        nop;

        $stack12 = interfaceinvoke $stack10.<java.util.Iterator: java.lang.Object next()>();

        it = (java.lang.String) $stack12;

        if it != null goto label2;

        nop;

        $stack17 = new java.lang.NullPointerException;

        varReplacer1210 = "null cannot be cast to non-null type java.lang.String";

        specialinvoke $stack17.<java.lang.NullPointerException: void <init>(java.lang.String)>(varReplacer1210);

        throw $stack17;

     label2:
        nop;

        $stack13 = <java.util.Locale: java.util.Locale ROOT>;

        $stack14 = virtualinvoke it.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack13);

        varReplacer1211 = "(this as java.lang.Strin\u2026.toUpperCase(Locale.ROOT)";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($stack14, varReplacer1211);

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.Object)>($stack14);

        goto label1;

     label3:
        nop;

        return;
    }

    public static final void main()
    {
        java.util.Collection $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;
        java.util.Set set#2;
        java.lang.String[] set;
        java.util.HashSet $stack3;
        java.util.List $stack2;
        java.lang.String varReplacer1212, varReplacer1213;

        nop;

        set = newarray (java.lang.String)[2];

        varReplacer1213 = "Ranjith";

        set[0] = varReplacer1213;

        varReplacer1212 = "K";

        set[1] = varReplacer1212;

        $stack2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>(set);

        $stack3 = new java.util.HashSet;

        $stack4 = (java.util.Collection) $stack2;

        specialinvoke $stack3.<java.util.HashSet: void <init>(java.util.Collection)>($stack4);

        set#2 = (java.util.Set) $stack3;

        $stack5 = (java.util.Collection) $stack2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void withIterators(java.util.Collection)>($stack5);

        $stack6 = (java.util.Collection) set#2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void withIterators(java.util.Collection)>($stack6);

        $stack7 = (java.util.Collection) $stack2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void withFor(java.util.Collection)>($stack7);

        $stack8 = (java.util.Collection) set#2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void withFor(java.util.Collection)>($stack8);

        $stack9 = (java.util.Collection) $stack2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void withForEach(java.util.Collection)>($stack9);

        $stack10 = (java.util.Collection) set#2;

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void withForEach(java.util.Collection)>($stack10);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;

        nop;

        args := @parameter0: java.lang.String[];

        staticinvoke <de.fraunhofer.iem.collections.iterators.iterable.inCollection.MainKt: void main()>();

        return;
    }
}
