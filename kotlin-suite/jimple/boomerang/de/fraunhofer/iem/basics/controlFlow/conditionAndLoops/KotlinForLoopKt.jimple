public final class de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt extends java.lang.Object
{

    public static final void main(java.lang.String[])
    {
        java.lang.Integer $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21;
        kotlin.ranges.IntRange $stack24;
        java.util.Collection $stack23;
        java.util.List $stack22;
        java.lang.Integer[] l1;
        java.lang.String[] args;
        kotlin.ranges.IntProgression $stack25, $stack26;
        int varReplacer3, varReplacer4, varReplacer5, varReplacer7, varReplacer8, varReplacer9, varReplacer10, varReplacer11, varReplacer12, varReplacer13, varReplacer14, varReplacer15, varReplacer16, varReplacer17, varReplacer18;
        java.lang.String varReplacer6;

        nop;

        args := @parameter0: java.lang.String[];

        varReplacer6 = "args";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(args, varReplacer6);

        l1 = newarray (java.lang.Integer)[10];

        varReplacer16 = 1;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer16);

        l1[0] = $stack3;

        varReplacer14 = 2;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer14);

        l1[1] = $stack5;

        varReplacer3 = 3;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer3);

        l1[2] = $stack7;

        varReplacer15 = 4;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer15);

        l1[3] = $stack9;

        varReplacer9 = 5;

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer9);

        l1[4] = $stack11;

        varReplacer12 = 6;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer12);

        l1[5] = $stack13;

        varReplacer10 = 7;

        $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer10);

        l1[6] = $stack15;

        varReplacer13 = 8;

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer13);

        l1[7] = $stack17;

        varReplacer18 = 9;

        $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer18);

        l1[8] = $stack19;

        varReplacer11 = 20;

        $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer11);

        l1[9] = $stack21;

        $stack22 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>(l1);

        $stack23 = (java.util.Collection) $stack22;

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt: void forIterator(java.util.Collection)>($stack23);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt: void forArray(java.lang.String[])>(args);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt: void forArrayWithIndex(java.lang.String[])>(args);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt: void forArrayWithIndexAndValue(java.lang.String[])>(args);

        $stack24 = new kotlin.ranges.IntRange;

        varReplacer7 = 1;

        varReplacer8 = 10;

        specialinvoke $stack24.<kotlin.ranges.IntRange: void <init>(int,int)>(varReplacer7, varReplacer8);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt: void forRangeExpr(kotlin.ranges.IntRange)>($stack24);

        varReplacer4 = 6;

        varReplacer5 = 0;

        $stack25 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression downTo(int,int)>(varReplacer4, varReplacer5);

        varReplacer17 = 2;

        $stack26 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($stack25, varReplacer17);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.KotlinForLoopKt: void forProgressionExpr(kotlin.ranges.IntProgression)>($stack26);

        return;
    }

    public static final void forIterator(java.util.Collection)
    {
        java.io.PrintStream $stack9;
        java.util.Iterator $stack4;
        java.util.Collection iter;
        int $stack8;
        java.lang.Object $stack6;
        java.lang.String varReplacer19;
        java.lang.Number $stack7;
        boolean $stack5;

        nop;

        iter := @parameter0: java.util.Collection;

        varReplacer19 = "iter";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(iter, varReplacer19);

        $stack4 = interfaceinvoke iter.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke $stack4.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        nop;

        $stack6 = interfaceinvoke $stack4.<java.util.Iterator: java.lang.Object next()>();

        $stack7 = (java.lang.Number) $stack6;

        $stack8 = virtualinvoke $stack7.<java.lang.Number: int intValue()>();

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(int)>($stack8);

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void forArray(java.lang.String[])
    {
        java.io.PrintStream $stack6;
        int l3, l2;
        java.lang.String[] args;
        java.lang.String elem, varReplacer20;

        nop;

        args := @parameter0: java.lang.String[];

        varReplacer20 = "args";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(args, varReplacer20);

        l2 = 0;

        l3 = lengthof args;

     label1:
        if l2 >= l3 goto label2;

        nop;

        elem = args[l2];

        l2 = l2 + 1;

        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.Object)>(elem);

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void forArrayWithIndex(java.lang.String[])
    {
        java.io.PrintStream $stack7;
        java.lang.String[] args;
        int $stack6, l2, i, l1, $i0;
        java.lang.String $stack11, varReplacer21;

        nop;

        args := @parameter0: java.lang.String[];

        varReplacer21 = "args";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(args, varReplacer21);

        l1 = 0;

        $stack6 = lengthof args;

        $i0 = (int) -1;

        l2 = $stack6 + $i0;

        if 0 > l2 goto label2;

        nop;

     label1:
        nop;

        i = l1;

        l1 = l1 + 1;

        $stack11 = args[i];

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>($stack11);

        if l1 <= l2 goto label1;

        nop;

     label2:
        nop;

        return;
    }

    public static final void forArrayWithIndexAndValue(java.lang.String[])
    {
        java.io.PrintStream $stack13;
        java.lang.String[] args;
        int l3, i, l2;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack11;
        java.lang.String elem, $stack12, varReplacer22, varReplacer23;

        nop;

        args := @parameter0: java.lang.String[];

        varReplacer23 = "args";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(args, varReplacer23);

        l2 = 0;

        l3 = lengthof args;

     label1:
        if l2 >= l3 goto label2;

        nop;

        i = l2;

        elem = args[l2];

        l2 = l2 + 1;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        varReplacer22 = " --> ";

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer22);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(elem);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack13.<java.io.PrintStream: void println(java.lang.Object)>($stack12);

        goto label1;

     label2:
        nop;

        return;
    }

    public static final void forRangeExpr(kotlin.ranges.IntRange)
    {
        java.io.PrintStream $stack7;
        int $stack5, $stack6, i, l1;
        java.lang.String varReplacer24;
        kotlin.ranges.IntRange range;

        nop;

        range := @parameter0: kotlin.ranges.IntRange;

        varReplacer24 = "range";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(range, varReplacer24);

        $stack5 = virtualinvoke range.<kotlin.ranges.IntRange: int getFirst()>();

        l1 = $stack5;

        $stack6 = virtualinvoke range.<kotlin.ranges.IntRange: int getLast()>();

        if $stack5 > $stack6 goto label2;

        nop;

     label1:
        nop;

        i = l1;

        l1 = l1 + 1;

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>(i);

        if i != $stack6 goto label1;

        nop;

     label2:
        nop;

        return;
    }

    public static final void forProgressionExpr(kotlin.ranges.IntProgression)
    {
        java.io.PrintStream $stack9;
        kotlin.ranges.IntProgression progress;
        int $stack6, $stack7, $stack8, i, l1;
        java.lang.String varReplacer25;

        nop;

        progress := @parameter0: kotlin.ranges.IntProgression;

        varReplacer25 = "progress";

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(progress, varReplacer25);

        $stack6 = virtualinvoke progress.<kotlin.ranges.IntProgression: int getFirst()>();

        l1 = $stack6;

        $stack7 = virtualinvoke progress.<kotlin.ranges.IntProgression: int getLast()>();

        $stack8 = virtualinvoke progress.<kotlin.ranges.IntProgression: int getStep()>();

        if $stack8 <= 0 goto label1;

        nop;

        if $stack6 <= $stack7 goto label2;

        nop;

     label1:
        nop;

        if $stack8 >= 0 goto label3;

        nop;

        if $stack7 > $stack6 goto label3;

        nop;

     label2:
        nop;

        nop;

        i = l1;

        l1 = l1 + $stack8;

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(int)>(i);

        if i != $stack7 goto label2;

        nop;

     label3:
        nop;

        nop;

        return;
    }
}
