public final class de.fraunhofer.iem.examplesForReport.SimpleCommandInjectionKt extends java.lang.Object
{

    public static final void runTheJobInShellSimple(java.lang.String)
    {
        java.io.PrintStream $stack30;
        java.lang.CharSequence $stack9;
        java.lang.Process $stack12;
        java.lang.String[] $stack14;
        java.io.IOException $stack29;
        int $stack10, $i0;
        java.lang.String command, $stack8, executable, argument1;
        java.lang.ProcessBuilder $u0;

        command := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(command, "command");

        $stack8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($stack8, "currentOS");

        $stack9 = (java.lang.CharSequence) $stack8;

        $stack10 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($stack9, "Windows", 0, 0, 6, null);

        $i0 = (int) -1;

        if $stack10 == $i0 goto label1;

        executable = "cmd.exe";

        argument1 = "/c";

        goto label2;

     label1:
        executable = "sh";

        argument1 = "-c";

     label2:
        $u0 = new java.lang.ProcessBuilder;

        $stack14 = newarray (java.lang.String)[3];

        $stack14[0] = executable;

        $stack14[1] = argument1;

        $stack14[2] = command;

        specialinvoke $u0.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($stack14);

     label3:
        $stack12 = virtualinvoke $u0.<java.lang.ProcessBuilder: java.lang.Process start()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($stack12, "process");

        staticinvoke <de.fraunhofer.iem.examplesForReport.CommandInjectionExampleKt: void printCommandOutput(java.lang.Process)>($stack12);

     label4:
        goto label6;

     label5:
        $stack29 := @caughtexception;

        $stack30 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack30.<java.io.PrintStream: void println(java.lang.Object)>("Error while executing the command");

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }
}
