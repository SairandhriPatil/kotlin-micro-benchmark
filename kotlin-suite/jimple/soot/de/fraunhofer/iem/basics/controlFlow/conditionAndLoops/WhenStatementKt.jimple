public final class de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt extends java.lang.Object
{

    public static final void main(java.lang.String[])
    {
        java.io.PrintStream $stack4, $stack6, $stack8, $stack11, $stack13;
        java.lang.String[] args;
        java.lang.Integer $stack9;
        java.lang.String $stack3, $stack5, $stack7, $stack10, $stack12;

        args := @parameter0: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(args, "args");

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: void simpleWhenStatement(int)>(90);

        $stack3 = staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: java.lang.String simpleWhenExpression(int)>(20);

        $stack4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack4.<java.io.PrintStream: void println(java.lang.Object)>($stack3);

        $stack5 = staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: java.lang.String whenWithCommonBehaviour(int)>(5);

        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.Object)>($stack5);

        $stack7 = staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: java.lang.String whenWithArbitraryExprAndAsIfElseIfExpr(java.lang.String)>("200");

        $stack8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack8.<java.io.PrintStream: void println(java.lang.Object)>($stack7);

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(999);

        $stack10 = staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: java.lang.String whenWithInAndIsOperator(java.lang.Object)>($stack9);

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.Object)>($stack10);

        $stack12 = staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: java.lang.String whenWithCaptureVariable(java.lang.String)>("99998");

        $stack13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack13.<java.io.PrintStream: void println(java.lang.Object)>($stack12);

        staticinvoke <de.fraunhofer.iem.basics.controlFlow.conditionAndLoops.WhenStatementKt: void anotherExampleForPresentation(java.lang.String[])>(args);

        return;
    }

    public static final void simpleWhenStatement(int)
    {
        java.io.PrintStream $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;
        int num;

        num := @parameter0: int;

        lookupswitch(num)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 5: goto label3;
            case 10: goto label4;
            case 20: goto label5;
            case 90: goto label6;
            default: goto label7;
        };

     label1:
        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.Object)>("Zero");

        goto label8;

     label2:
        $stack8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack8.<java.io.PrintStream: void println(java.lang.Object)>("One");

        goto label8;

     label3:
        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>("Five");

        goto label8;

     label4:
        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.Object)>("Ten");

        goto label8;

     label5:
        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>("Twenty");

        goto label8;

     label6:
        $stack4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack4.<java.io.PrintStream: void println(java.lang.Object)>("Ninety");

        goto label8;

     label7:
        $stack10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack10.<java.io.PrintStream: void println(java.lang.Object)>("Others");

     label8:
        return;
    }

    public static final java.lang.String simpleWhenExpression(int)
    {
        int num;
        java.lang.String $stack4, $stack3;

        num := @parameter0: int;

        lookupswitch(num)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 5: goto label3;
            case 10: goto label4;
            case 20: goto label5;
            case 90: goto label6;
            default: goto label7;
        };

     label1:
        $stack4 = "Zero";

        goto label8;

     label2:
        $stack4 = "One";

        goto label8;

     label3:
        $stack4 = "Five";

        goto label8;

     label4:
        $stack4 = "Ten";

        goto label8;

     label5:
        $stack4 = "Twenty";

        goto label8;

     label6:
        $stack4 = "Ninety";

        goto label8;

     label7:
        $stack4 = "Others";

     label8:
        $stack3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Given number is ", $stack4);

        return $stack3;
    }

    public static final java.lang.String whenWithCommonBehaviour(int)
    {
        int num;
        java.lang.String $stack4, $stack3;

        num := @parameter0: int;

        lookupswitch(num)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 5: goto label1;
            case 10: goto label2;
            case 20: goto label2;
            case 90: goto label2;
            default: goto label3;
        };

     label1:
        $stack4 = "Zero or One or Five";

        goto label4;

     label2:
        $stack4 = "Ten or Twenty or Ninety";

        goto label4;

     label3:
        $stack4 = "Others";

     label4:
        $stack3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Given number is ", $stack4);

        return $stack3;
    }

    public static final java.lang.String whenWithArbitraryExprAndAsIfElseIfExpr(java.lang.String)
    {
        java.lang.CharSequence l2;
        java.lang.Integer $stack5, $stack6;
        int $stack4;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack11;
        java.lang.String str, $stack13, $stack12;
        boolean $stack7, $stack17;

        str := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(str, "str");

        l2 = (java.lang.CharSequence) str;

        $stack4 = interfaceinvoke l2.<java.lang.CharSequence: int length()>();

        if $stack4 <= 0 goto label1;

        $stack17 = 1;

        goto label2;

     label1:
        $stack17 = 0;

     label2:
        if $stack17 == 0 goto label3;

        $stack13 = "String is non empty";

        goto label7;

     label3:
        $stack5 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>(str);

        if $stack5 != null goto label4;

        $stack13 = "Can not parse the string to Int";

        goto label7;

     label4:
        $stack6 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>(str);

        if $stack6 == null goto label5;

        $stack13 = "Can parse the string to Int";

        goto label7;

     label5:
        $stack7 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>(str, "Kotlin", 0, 2, null);

        if $stack7 == 0 goto label6;

        $stack13 = "Given string starts with Kotlin";

        goto label7;

     label6:
        $stack13 = "Unknown";

     label7:
        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given string first matches \"");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack12;
    }

    public static final java.lang.String whenWithInAndIsOperator(java.lang.Object)
    {
        java.lang.Iterable $stack5, $stack9;
        java.lang.Object ob;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $stack14;
        java.lang.String $stack16, $stack15;
        boolean $stack3, $stack6, $stack7, $stack10;
        kotlin.ranges.IntRange $stack4, $stack8;

        ob := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(ob, "ob");

        $stack3 = ob instanceof java.lang.Number;

        if $stack3 != 0 goto label1;

        $stack16 = "Not an Number";

        goto label5;

     label1:
        $stack4 = new kotlin.ranges.IntRange;

        specialinvoke $stack4.<kotlin.ranges.IntRange: void <init>(int,int)>(0, 5);

        $stack5 = (java.lang.Iterable) $stack4;

        $stack6 = staticinvoke <kotlin.collections.CollectionsKt: boolean contains(java.lang.Iterable,java.lang.Object)>($stack5, ob);

        if $stack6 == 0 goto label2;

        $stack16 = "Given number is in range of 0 to 5";

        goto label5;

     label2:
        $stack7 = ob instanceof java.lang.Integer;

        if $stack7 == 0 goto label3;

        $stack16 = "Given number is Int";

        goto label5;

     label3:
        $stack8 = new kotlin.ranges.IntRange;

        specialinvoke $stack8.<kotlin.ranges.IntRange: void <init>(int,int)>(100, 1000);

        $stack9 = (java.lang.Iterable) $stack8;

        $stack10 = staticinvoke <kotlin.collections.CollectionsKt: boolean contains(java.lang.Iterable,java.lang.Object)>($stack9, ob);

        if $stack10 == 0 goto label4;

        $stack16 = "Given number is in range of 100 to 1000";

        goto label5;

     label4:
        $stack16 = "Unknown";

     label5:
        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given string first matches \"");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack15;
    }

    public static final java.lang.String whenWithCaptureVariable(java.lang.String)
    {
        java.lang.Integer $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20;
        int $stack3;
        java.lang.String str, $stack6;

        str := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(str, "str");

        $stack2 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>(str);

        if $stack2 == null goto label7;

        $stack3 = virtualinvoke str.<java.lang.String: int length()>();

        tableswitch($stack3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        $stack6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("One digit number! Length = ", $stack17);

        goto label8;

     label2:
        $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        $stack6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Two digits number! Length = ", $stack14);

        goto label8;

     label3:
        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        $stack6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Three digits number! Length = ", $stack11);

        goto label8;

     label4:
        $stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        $stack6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Four digits number! Length = ", $stack8);

        goto label8;

     label5:
        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        $stack6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Five digits number! Length = ", $stack5);

        goto label8;

     label6:
        $stack20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack3);

        $stack6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Greater than 5 digits number! Length = ", $stack20);

        goto label8;

     label7:
        $stack6 = "Given string does not contain a valid number";

     label8:
        return $stack6;
    }

    public static final void anotherExampleForPresentation(java.lang.String[])
    {
        java.io.PrintStream $stack6, $stack9, $stack14, $stack7;
        java.lang.String[] args;
        int $stack4;
        java.lang.String l1;
        boolean $stack5, $stack8, $stack13;

        args := @parameter0: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(args, "args");

        l1 = args[0];

        $stack4 = virtualinvoke l1.<java.lang.String: int hashCode()>();

        lookupswitch($stack4)
        {
            case 3329: goto label1;
            case 99162322: goto label3;
            case 605712515: goto label2;
            default: goto label7;
        };

     label1:
        $stack13 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("hi");

        if $stack13 != 0 goto label4;

        goto label7;

     label2:
        $stack5 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("how are you");

        if $stack5 != 0 goto label6;

        goto label7;

     label3:
        $stack8 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("hello");

        if $stack8 != 0 goto label5;

        goto label7;

     label4:
        $stack14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack14.<java.io.PrintStream: void println(java.lang.Object)>("Hi!");

        goto label8;

     label5:
        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.Object)>("Hello!");

        goto label8;

     label6:
        $stack6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack6.<java.io.PrintStream: void println(java.lang.Object)>("How Are You?");

        goto label8;

     label7:
        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(java.lang.Object)>("What should i tell?");

     label8:
        return;
    }
}
