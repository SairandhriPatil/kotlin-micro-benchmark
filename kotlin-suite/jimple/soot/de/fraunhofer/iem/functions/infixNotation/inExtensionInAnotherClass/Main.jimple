public final class de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main extends java.lang.Object
{
    private final java.lang.String appName;

    public void <init>()
    {
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName> = "MyApp";

        return;
    }

    public final de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt add(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)
    {
        java.io.PrintStream $stack5, $stack7, $stack9;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt $this$add, secondNumber, $stack10;
        int $stack6, $stack8, $stack11, $stack12, $stack13;
        java.lang.String l3;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        $this$add := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        secondNumber := @parameter1: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($this$add, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(secondNumber, "secondNumber");

        l3 = this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName>;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>(l3);

        $stack6 = virtualinvoke $this$add.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        $stack8 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(int)>($stack8);

        $stack10 = new de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        $stack11 = virtualinvoke $this$add.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack12 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack13 = $stack11 + $stack12;

        specialinvoke $stack10.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: void <init>(int)>($stack13);

        return $stack10;
    }

    public final de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt sub(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)
    {
        java.io.PrintStream $stack5, $stack7, $stack9;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt $this$sub, secondNumber, $stack10;
        int $stack6, $stack8, $stack11, $stack12, $stack13;
        java.lang.String l3;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        $this$sub := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        secondNumber := @parameter1: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($this$sub, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(secondNumber, "secondNumber");

        l3 = this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: java.lang.String appName>;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.Object)>(l3);

        $stack6 = virtualinvoke $this$sub.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        $stack8 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack9.<java.io.PrintStream: void println(int)>($stack8);

        $stack10 = new de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        $stack11 = virtualinvoke $this$sub.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack12 = virtualinvoke secondNumber.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack13 = $stack11 - $stack12;

        specialinvoke $stack10.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: void <init>(int)>($stack13);

        return $stack10;
    }

    public final void addAndSub(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt, de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)
    {
        java.io.PrintStream $stack7, $stack10;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main this;
        de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt num1, num2, $stack5, $stack8;
        int $stack6, $stack9;

        this := @this: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main;

        num1 := @parameter0: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        num2 := @parameter1: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(num1, "num1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(num2, "num2");

        $stack5 = virtualinvoke this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt add(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt,de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)>(num1, num2);

        $stack6 = virtualinvoke $stack5.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack7.<java.io.PrintStream: void println(int)>($stack6);

        $stack8 = virtualinvoke this.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.Main: de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt sub(de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt,de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt)>(num1, num2);

        $stack9 = virtualinvoke $stack8.<de.fraunhofer.iem.functions.infixNotation.inExtensionInAnotherClass.MyInt: int getNumber()>();

        $stack10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack10.<java.io.PrintStream: void println(int)>($stack9);

        return;
    }
}
