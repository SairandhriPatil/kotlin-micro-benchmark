public final class de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt extends java.lang.Object
{

    public static final int stepIncrementer(int, int, int)
    {
        int number, iterCount, step, $stack20;
        java.lang.String $stack17;
        kotlin.jvm.internal.Ref$ObjectRef $stack9;
        java.io.PrintStream $stack18, $stack19;
        kotlin.jvm.internal.Ref$IntRef $stack8;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16;
        java.lang.Object l6;

        number := @parameter0: int;

        iterCount := @parameter1: int;

        step := @parameter2: int;

        $stack8 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $stack8.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $stack8.<kotlin.jvm.internal.Ref$IntRef: int element> = number;

        $stack9 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $stack9.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        $stack9.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = "";

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number = ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(number);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIteration Count = ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(iterCount);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIncrement step = ");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(step);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack18.<java.io.PrintStream: void println(java.lang.Object)>($stack17);

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: void stepIncrementer$add(int,kotlin.jvm.internal.Ref$IntRef,int,int)>(iterCount, $stack8, step, 1);

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: void stepIncrementer$add-0(kotlin.jvm.internal.Ref$ObjectRef,int,int)>($stack9, 1, 0);

        l6 = $stack9.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $stack19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack19.<java.io.PrintStream: void println(java.lang.Object)>(l6);

        $stack20 = $stack8.<kotlin.jvm.internal.Ref$IntRef: int element>;

        return $stack20;
    }

    public static final int stepIncrementer1For10Count(int)
    {
        java.io.PrintStream $stack15;
        kotlin.jvm.internal.Ref$IntRef $stack5;
        int number, $stack12, $stack16;
        java.lang.StringBuilder $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack13;
        java.lang.String $stack14;

        number := @parameter0: int;

        $stack5 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $stack5.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $stack5.<kotlin.jvm.internal.Ref$IntRef: int element> = 1;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number = ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(number);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIteration Count = ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(10);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIncrement step = ");

        $stack12 = $stack5.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.Object)>($stack14);

        $stack16 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer1For10Count$add-1(int,kotlin.jvm.internal.Ref$IntRef,int,int,java.lang.String)>(10, $stack5, number, 1, "");

        return $stack16;
    }

    public static final void main()
    {
        java.lang.StringBuilder $stack2, $stack3, $stack5, $stack6, $stack9, $stack10, $stack12, $stack13, $stack16, $stack17, $stack19, $stack20, $stack23, $stack24, $stack26, $stack27, $stack30, $stack31, $stack33, $stack34, $stack37, $stack38, $stack40, $stack41;
        int $stack4, $stack11, $stack18, $stack25, $stack32, $stack39;
        java.lang.String $stack7, $stack14, $stack21, $stack28, $stack35, $stack42;
        java.io.PrintStream $stack8, $stack15, $stack22, $stack29, $stack36, $stack43;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result = ");

        $stack4 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer(int,int,int)>(0, 10, 1);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack8.<java.io.PrintStream: void println(java.lang.Object)>($stack7);

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result = ");

        $stack11 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer(int,int,int)>(100, 10, 100);

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.Object)>($stack14);

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result = ");

        $stack18 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer(int,int,int)>(21, 100, 123);

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack22.<java.io.PrintStream: void println(java.lang.Object)>($stack21);

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result = ");

        $stack25 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer1For10Count(int)>(0);

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack29.<java.io.PrintStream: void println(java.lang.Object)>($stack28);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result = ");

        $stack32 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer1For10Count(int)>(100);

        $stack33 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack32);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack36 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack36.<java.io.PrintStream: void println(java.lang.Object)>($stack35);

        $stack37 = new java.lang.StringBuilder;

        specialinvoke $stack37.<java.lang.StringBuilder: void <init>()>();

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result = ");

        $stack39 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer1For10Count(int)>(21);

        $stack40 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack39);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack43 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack43.<java.io.PrintStream: void println(java.lang.Object)>($stack42);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: void main()>();

        return;
    }

    private static final void stepIncrementer$add(int, kotlin.jvm.internal.Ref$IntRef, int, int)
    {
        int currentIter, $iterCount, $step, $stack4, $stack5, $stack6;
        kotlin.jvm.internal.Ref$IntRef res;

        $iterCount := @parameter0: int;

        res := @parameter1: kotlin.jvm.internal.Ref$IntRef;

        $step := @parameter2: int;

        currentIter := @parameter3: int;

        if currentIter <= $iterCount goto label1;

        return;

     label1:
        $stack4 = res.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $stack5 = $stack4 + $step;

        res.<kotlin.jvm.internal.Ref$IntRef: int element> = $stack5;

        $stack6 = currentIter + 1;

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: void stepIncrementer$add(int,kotlin.jvm.internal.Ref$IntRef,int,int)>($iterCount, res, $step, $stack6);

        return;
    }

    private static final void stepIncrementer$add-0(kotlin.jvm.internal.Ref$ObjectRef, int, int)
    {
        java.io.PrintStream $stack11;
        int currentIter, dummyInt;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8, $stack9;
        java.lang.String $stack10;
        kotlin.jvm.internal.Ref$ObjectRef dummyString;

        dummyString := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        currentIter := @parameter1: int;

        dummyInt := @parameter2: int;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dummy to test for function overload of local function ");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(currentIter);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(dummyInt);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.Object)>($stack10);

        dummyString.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = "Dummy to test function overloads in local function";

        return;
    }

    private static final int stepIncrementer1For10Count$add-1(int, kotlin.jvm.internal.Ref$IntRef, int, int, java.lang.String)
    {
        kotlin.jvm.internal.Ref$IntRef step;
        int currentIter, iterCount, $stack5, $number, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        java.lang.String dummyFlag;

        iterCount := @parameter0: int;

        step := @parameter1: kotlin.jvm.internal.Ref$IntRef;

        $number := @parameter2: int;

        currentIter := @parameter3: int;

        dummyFlag := @parameter4: java.lang.String;

        $stack5 = iterCount + 1;

        if currentIter <= $stack5 goto label1;

        return 0;

     label1:
        if currentIter <= 1 goto label2;

        $stack10 = step.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $stack9 = currentIter + 1;

        $stack11 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer1For10Count$add-1(int,kotlin.jvm.internal.Ref$IntRef,int,int,java.lang.String)>(iterCount, step, $number, $stack9, "");

        $stack12 = $stack10 + $stack11;

        return $stack12;

     label2:
        $stack6 = currentIter + 1;

        $stack7 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inTopLevel.MainKt: int stepIncrementer1For10Count$add-1(int,kotlin.jvm.internal.Ref$IntRef,int,int,java.lang.String)>(iterCount, step, $number, $stack6, "");

        $stack8 = $number + $stack7;

        return $stack8;
    }
}
