public final class de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer extends java.lang.Object
{
    private java.lang.String dummyProperty1;
    private java.lang.String dummyProperty2;

    public void <init>()
    {
        de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer this;

        this := @this: de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: java.lang.String dummyProperty1> = "dummy";

        this.<de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: java.lang.String dummyProperty2> = "dummy";

        return;
    }

    public final java.lang.String getDummyProperty1()
    {
        de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer this;
        java.lang.String $stack1;

        this := @this: de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer;

        $stack1 = this.<de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: java.lang.String dummyProperty1>;

        return $stack1;
    }

    public final void setDummyProperty1(java.lang.String)
    {
        de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer this;
        java.lang.String <set-?>;

        this := @this: de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer;

        <set-?> := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(<set-?>, "<set-?>");

        this.<de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: java.lang.String dummyProperty1> = <set-?>;

        return;
    }

    public final int stepIncrementer(int, int, int)
    {
        int number, iterCount, step, $stack21;
        java.lang.String $stack18;
        kotlin.jvm.internal.Ref$ObjectRef $stack10;
        java.io.PrintStream $stack19, $stack20;
        kotlin.jvm.internal.Ref$IntRef $stack9;
        de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer this;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17;
        java.lang.Object l7;

        this := @this: de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer;

        number := @parameter0: int;

        iterCount := @parameter1: int;

        step := @parameter2: int;

        $stack9 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $stack9.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $stack9.<kotlin.jvm.internal.Ref$IntRef: int element> = number;

        $stack10 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $stack10.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        $stack10.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = "";

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number = ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(number);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIteration Count = ");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(iterCount);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIncrement step = ");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(step);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack19.<java.io.PrintStream: void println(java.lang.Object)>($stack18);

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: void stepIncrementer$add(int,kotlin.jvm.internal.Ref$IntRef,int,int)>(iterCount, $stack9, step, 1);

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: void stepIncrementer$add-0(kotlin.jvm.internal.Ref$ObjectRef,int,int)>($stack10, 1, 0);

        l7 = $stack10.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $stack20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack20.<java.io.PrintStream: void println(java.lang.Object)>(l7);

        $stack21 = $stack9.<kotlin.jvm.internal.Ref$IntRef: int element>;

        return $stack21;
    }

    public final int stepIncrementer1For10Count(int)
    {
        java.io.PrintStream $stack16;
        kotlin.jvm.internal.Ref$IntRef $stack6;
        de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer this;
        int number, $stack13, $stack17;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack14;
        java.lang.String $stack15;

        this := @this: de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer;

        number := @parameter0: int;

        $stack6 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $stack6.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $stack6.<kotlin.jvm.internal.Ref$IntRef: int element> = 1;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number = ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(number);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIteration Count = ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIncrement step = ");

        $stack13 = $stack6.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack16.<java.io.PrintStream: void println(java.lang.Object)>($stack15);

        $stack17 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: int stepIncrementer1For10Count$add-1(de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer,int,kotlin.jvm.internal.Ref$IntRef,int,int,java.lang.String)>(this, 10, $stack6, number, 1, "");

        return $stack17;
    }

    private static final void stepIncrementer$add(int, kotlin.jvm.internal.Ref$IntRef, int, int)
    {
        int currentIter, $iterCount, $step, $stack4, $stack5, $stack6;
        kotlin.jvm.internal.Ref$IntRef res;

        $iterCount := @parameter0: int;

        res := @parameter1: kotlin.jvm.internal.Ref$IntRef;

        $step := @parameter2: int;

        currentIter := @parameter3: int;

        if currentIter <= $iterCount goto label1;

        return;

     label1:
        $stack4 = res.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $stack5 = $stack4 + $step;

        res.<kotlin.jvm.internal.Ref$IntRef: int element> = $stack5;

        $stack6 = currentIter + 1;

        staticinvoke <de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: void stepIncrementer$add(int,kotlin.jvm.internal.Ref$IntRef,int,int)>($iterCount, res, $step, $stack6);

        return;
    }

    private static final void stepIncrementer$add-0(kotlin.jvm.internal.Ref$ObjectRef, int, int)
    {
        java.io.PrintStream $stack11;
        int currentIter, dummyInt;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8, $stack9;
        java.lang.String $stack10;
        kotlin.jvm.internal.Ref$ObjectRef dummyString;

        dummyString := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        currentIter := @parameter1: int;

        dummyInt := @parameter2: int;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dummy to test for function overload of local function ");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(currentIter);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(dummyInt);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.Object)>($stack10);

        dummyString.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = "Dummy to test function overloads in local function";

        return;
    }

    private static final int stepIncrementer1For10Count$add-1(de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer, int, kotlin.jvm.internal.Ref$IntRef, int, int, java.lang.String)
    {
        kotlin.jvm.internal.Ref$IntRef step;
        de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer this$0;
        int currentIter, iterCount, $stack6, $number, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        java.lang.String dummyFlag;

        this$0 := @parameter0: de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer;

        iterCount := @parameter1: int;

        step := @parameter2: kotlin.jvm.internal.Ref$IntRef;

        $number := @parameter3: int;

        currentIter := @parameter4: int;

        dummyFlag := @parameter5: java.lang.String;

        this$0.<de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: java.lang.String dummyProperty1> = "Dummy to demonstrate the local functions";

        this$0.<de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: java.lang.String dummyProperty2> = "Dummy to demonstrate the local functions";

        $stack6 = iterCount + 1;

        if currentIter <= $stack6 goto label1;

        return 0;

     label1:
        if currentIter <= 1 goto label2;

        $stack11 = step.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $stack10 = currentIter + 1;

        $stack12 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: int stepIncrementer1For10Count$add-1(de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer,int,kotlin.jvm.internal.Ref$IntRef,int,int,java.lang.String)>(this$0, iterCount, step, $number, $stack10, "");

        $stack13 = $stack11 + $stack12;

        return $stack13;

     label2:
        $stack7 = currentIter + 1;

        $stack8 = staticinvoke <de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer: int stepIncrementer1For10Count$add-1(de.fraunhofer.iem.functions.localFunctions.inClass.Incrementer,int,kotlin.jvm.internal.Ref$IntRef,int,int,java.lang.String)>(this$0, iterCount, step, $number, $stack7, "");

        $stack9 = $number + $stack8;

        return $stack9;
    }
}
