public final class de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt extends java.lang.Object
{

    public static final void printIntProgressions(kotlin.ranges.IntProgression)
    {
        kotlin.ranges.IntProgression progression;
        int $stack13, $stack14, $stack15, i, l1;
        java.lang.String $stack11, $stack19;
        java.io.PrintStream $stack12, $stack20;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack10, $stack16, $stack17, $stack18;

        progression := @parameter0: kotlin.ranges.IntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(progression, "progression");

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(progression);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack12.<java.io.PrintStream: void println(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke progression.<kotlin.ranges.IntProgression: int getFirst()>();

        l1 = $stack13;

        $stack14 = virtualinvoke progression.<kotlin.ranges.IntProgression: int getLast()>();

        $stack15 = virtualinvoke progression.<kotlin.ranges.IntProgression: int getStep()>();

        if $stack15 <= 0 goto label1;

        if $stack13 <= $stack14 goto label2;

     label1:
        if $stack15 >= 0 goto label3;

        if $stack14 > $stack13 goto label3;

     label2:
        i = l1;

        l1 = l1 + $stack15;

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack20.<java.io.PrintStream: void print(java.lang.Object)>($stack19);

        if i != $stack14 goto label2;

     label3:
        return;
    }

    public static final void printCharProgressions(kotlin.ranges.CharProgression)
    {
        int $stack15, $stack16, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $stack11, $stack20;
        java.io.PrintStream $stack12, $stack21;
        char $stack13, $stack14, i, l1;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack18, $stack19, $u0, $u1;
        kotlin.ranges.CharProgression progression;

        progression := @parameter0: kotlin.ranges.CharProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(progression, "progression");

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(progression);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack12.<java.io.PrintStream: void println(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke progression.<kotlin.ranges.CharProgression: char getFirst()>();

        l1 = $stack13;

        $stack14 = virtualinvoke progression.<kotlin.ranges.CharProgression: char getLast()>();

        $stack15 = virtualinvoke progression.<kotlin.ranges.CharProgression: int getStep()>();

        if $stack15 <= 0 goto label1;

        $i0 = (int) $stack13;

        $i1 = (int) $stack14;

        if $i0 <= $i1 goto label2;

     label1:
        if $stack15 >= 0 goto label3;

        $i2 = (int) $stack14;

        $i3 = (int) $stack13;

        if $i2 > $i3 goto label3;

     label2:
        i = l1;

        $i4 = (int) l1;

        $stack16 = $i4 + $stack15;

        l1 = (char) $stack16;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(i);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack21.<java.io.PrintStream: void print(java.lang.Object)>($stack20);

        $i5 = (int) i;

        $i6 = (int) $stack14;

        if $i5 != $i6 goto label2;

     label3:
        return;
    }

    public static final void printLongProgressions(kotlin.ranges.LongProgression)
    {
        kotlin.ranges.LongProgression progression;
        long $stack17, $stack18, $stack19, i, l1;
        byte $stack20, $stack21, $stack22, $stack39, $stack28;
        int $i0, $i1, $i2, $i3;
        java.lang.String $stack15, $stack26;
        java.io.PrintStream $stack16, $stack27;
        java.lang.StringBuilder $stack12, $stack13, $stack14, $stack24, $stack25, $u0, $u1;

        progression := @parameter0: kotlin.ranges.LongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(progression, "progression");

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(progression);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack16.<java.io.PrintStream: void println(java.lang.Object)>($stack15);

        $stack17 = virtualinvoke progression.<kotlin.ranges.LongProgression: long getFirst()>();

        l1 = $stack17;

        $stack18 = virtualinvoke progression.<kotlin.ranges.LongProgression: long getLast()>();

        $stack19 = virtualinvoke progression.<kotlin.ranges.LongProgression: long getStep()>();

        $stack20 = $stack19 cmp 0L;

        $i0 = (int) $stack20;

        if $i0 <= 0 goto label1;

        $stack39 = $stack17 cmp $stack18;

        $i1 = (int) $stack39;

        if $i1 <= 0 goto label2;

     label1:
        $stack21 = $stack19 cmp 0L;

        $i2 = (int) $stack21;

        if $i2 >= 0 goto label3;

        $stack22 = $stack18 cmp $stack17;

        $i3 = (int) $stack22;

        if $i3 > 0 goto label3;

     label2:
        i = l1;

        l1 = l1 + $stack19;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(i);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack27.<java.io.PrintStream: void print(java.lang.Object)>($stack26);

        $stack28 = i cmp $stack18;

        if $stack28 != 0 goto label2;

     label3:
        return;
    }

    public static final void printULongProgressions(kotlin.ranges.ULongProgression)
    {
        long $stack18, $stack19, $stack20, l1, i;
        kotlin.ranges.ULongProgression progression;
        byte $stack21, $stack22, $stack30;
        int $stack23, $stack41, $i0, $i1;
        java.lang.String $stack16, $stack25, $stack28;
        java.io.PrintStream $stack17, $stack29;
        java.lang.StringBuilder $stack13, $stack14, $stack15, $stack26, $stack27, $u0, $u1;

        progression := @parameter0: kotlin.ranges.ULongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(progression, "progression");

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(progression);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack17.<java.io.PrintStream: void println(java.lang.Object)>($stack16);

        $stack18 = virtualinvoke progression.<kotlin.ranges.ULongProgression: long getFirst-s-VKNKU()>();

        l1 = $stack18;

        $stack19 = virtualinvoke progression.<kotlin.ranges.ULongProgression: long getLast-s-VKNKU()>();

        $stack20 = virtualinvoke progression.<kotlin.ranges.ULongProgression: long getStep()>();

        $stack21 = $stack20 cmp 0L;

        $i0 = (int) $stack21;

        if $i0 <= 0 goto label1;

        $stack41 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($stack18, $stack19);

        if $stack41 <= 0 goto label2;

     label1:
        $stack22 = $stack20 cmp 0L;

        $i1 = (int) $stack22;

        if $i1 >= 0 goto label3;

        $stack23 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($stack19, $stack18);

        if $stack23 > 0 goto label3;

     label2:
        i = l1;

        l1 = l1 + $stack20;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack25 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>(i);

        $stack26 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack29.<java.io.PrintStream: void print(java.lang.Object)>($stack28);

        $stack30 = i cmp $stack19;

        if $stack30 != 0 goto label2;

     label3:
        return;
    }

    public static final void printUIntProgressions(kotlin.ranges.UIntProgression)
    {
        int $stack13, $stack14, $stack15, $stack16, $stack33, l1, i;
        java.lang.String $stack11, $stack18, $stack21;
        java.io.PrintStream $stack12, $stack22;
        kotlin.ranges.UIntProgression progression;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack10, $stack17, $stack19, $stack20;

        progression := @parameter0: kotlin.ranges.UIntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(progression, "progression");

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(progression);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack12.<java.io.PrintStream: void println(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke progression.<kotlin.ranges.UIntProgression: int getFirst-pVg5ArA()>();

        l1 = $stack13;

        $stack14 = virtualinvoke progression.<kotlin.ranges.UIntProgression: int getLast-pVg5ArA()>();

        $stack15 = virtualinvoke progression.<kotlin.ranges.UIntProgression: int getStep()>();

        if $stack15 <= 0 goto label1;

        $stack33 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($stack13, $stack14);

        if $stack33 <= 0 goto label2;

     label1:
        if $stack15 >= 0 goto label3;

        $stack16 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($stack14, $stack13);

        if $stack16 > 0 goto label3;

     label2:
        i = l1;

        l1 = l1 + $stack15;

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = staticinvoke <kotlin.UInt: java.lang.String toString-impl(int)>(i);

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack22.<java.io.PrintStream: void print(java.lang.Object)>($stack21);

        if i != $stack14 goto label2;

     label3:
        return;
    }

    public static final void main()
    {
        kotlin.ranges.CharRange $stack8;
        kotlin.ranges.LongProgression $stack12, $stack13, $stack23, $stack24;
        kotlin.ranges.ULongProgression $stack15, $stack16, $stack25, $stack26;
        kotlin.ranges.IntProgression $stack6, $stack7, $stack20;
        kotlin.ranges.IntRange $stack5;
        kotlin.ranges.ULongRange $stack14;
        kotlin.ranges.LongRange $stack11;
        kotlin.ranges.UIntProgression $stack18, $stack19, $stack27, $stack28;
        kotlin.ranges.UIntRange $stack17;
        kotlin.ranges.CharProgression $stack9, $stack10, $stack21, $stack22;

        $stack5 = new kotlin.ranges.IntRange;

        specialinvoke $stack5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, 10);

        $stack6 = (kotlin.ranges.IntProgression) $stack5;

        $stack7 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($stack6, 2);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printIntProgressions(kotlin.ranges.IntProgression)>($stack7);

        $stack8 = new kotlin.ranges.CharRange;

        specialinvoke $stack8.<kotlin.ranges.CharRange: void <init>(char,char)>(65, 90);

        $stack9 = (kotlin.ranges.CharProgression) $stack8;

        $stack10 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.CharProgression step(kotlin.ranges.CharProgression,int)>($stack9, 5);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printCharProgressions(kotlin.ranges.CharProgression)>($stack10);

        $stack11 = new kotlin.ranges.LongRange;

        specialinvoke $stack11.<kotlin.ranges.LongRange: void <init>(long,long)>(1L, 10L);

        $stack12 = (kotlin.ranges.LongProgression) $stack11;

        $stack13 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.LongProgression step(kotlin.ranges.LongProgression,long)>($stack12, 2L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printLongProgressions(kotlin.ranges.LongProgression)>($stack13);

        $stack14 = new kotlin.ranges.ULongRange;

        specialinvoke $stack14.<kotlin.ranges.ULongRange: void <init>(long,long,kotlin.jvm.internal.DefaultConstructorMarker)>(1L, 10L, null);

        $stack15 = (kotlin.ranges.ULongProgression) $stack14;

        $stack16 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.ULongProgression step(kotlin.ranges.ULongProgression,long)>($stack15, 3L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printULongProgressions(kotlin.ranges.ULongProgression)>($stack16);

        $stack17 = new kotlin.ranges.UIntRange;

        specialinvoke $stack17.<kotlin.ranges.UIntRange: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(1, 10, null);

        $stack18 = (kotlin.ranges.UIntProgression) $stack17;

        $stack19 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.UIntProgression step(kotlin.ranges.UIntProgression,int)>($stack18, 4);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printUIntProgressions(kotlin.ranges.UIntProgression)>($stack19);

        $stack20 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression downTo(int,int)>(10, 1);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printIntProgressions(kotlin.ranges.IntProgression)>($stack20);

        $stack21 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.CharProgression downTo(char,char)>(90, 65);

        $stack22 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.CharProgression step(kotlin.ranges.CharProgression,int)>($stack21, 10);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printCharProgressions(kotlin.ranges.CharProgression)>($stack22);

        $stack23 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.LongProgression downTo(long,long)>(10L, 1L);

        $stack24 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.LongProgression step(kotlin.ranges.LongProgression,long)>($stack23, 2L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printLongProgressions(kotlin.ranges.LongProgression)>($stack24);

        $stack25 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.ULongProgression downTo-eb3DHEI(long,long)>(10L, 1L);

        $stack26 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.ULongProgression step(kotlin.ranges.ULongProgression,long)>($stack25, 3L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printULongProgressions(kotlin.ranges.ULongProgression)>($stack26);

        $stack27 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.UIntProgression downTo-J1ME1BU(int,int)>(10, 1);

        $stack28 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.UIntProgression step(kotlin.ranges.UIntProgression,int)>($stack27, 4);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void printUIntProgressions(kotlin.ranges.UIntProgression)>($stack28);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.preogressions.simpleExample.MainKt: void main()>();

        return;
    }
}
