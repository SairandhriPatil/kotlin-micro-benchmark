public final class de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt extends java.lang.Object
{

    public static final void printIntRanges(kotlin.ranges.IntRange)
    {
        int $stack12, $stack13, i, l1;
        java.lang.String $stack10, $stack17;
        kotlin.ranges.IntRange range;
        java.io.PrintStream $stack11, $stack18;
        java.lang.StringBuilder $stack6, $stack7, $stack8, $stack9, $stack14, $stack15, $stack16;

        range := @parameter0: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(range, "range");

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(range);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.Object)>($stack10);

        $stack12 = virtualinvoke range.<kotlin.ranges.IntRange: int getFirst()>();

        l1 = $stack12;

        $stack13 = virtualinvoke range.<kotlin.ranges.IntRange: int getLast()>();

        if $stack12 > $stack13 goto label2;

     label1:
        i = l1;

        l1 = l1 + 1;

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack18.<java.io.PrintStream: void print(java.lang.Object)>($stack17);

        if i != $stack13 goto label1;

     label2:
        return;
    }

    public static final void printCharRanges(kotlin.ranges.CharRange)
    {
        kotlin.ranges.CharRange range;
        int $stack14, $i0, $i1, $i2, $i3, $i4;
        java.lang.String $stack10, $stack18;
        java.io.PrintStream $stack11, $stack19;
        char $stack12, $stack13, i, l1;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack16, $stack17, $u0, $u1;

        range := @parameter0: kotlin.ranges.CharRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(range, "range");

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(range);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.Object)>($stack10);

        $stack12 = virtualinvoke range.<kotlin.ranges.CharRange: char getFirst()>();

        l1 = $stack12;

        $stack13 = virtualinvoke range.<kotlin.ranges.CharRange: char getLast()>();

        $i0 = (int) $stack12;

        $i1 = (int) $stack13;

        if $i0 > $i1 goto label2;

     label1:
        i = l1;

        $i2 = (int) l1;

        $stack14 = $i2 + 1;

        l1 = (char) $stack14;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(i);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack19.<java.io.PrintStream: void print(java.lang.Object)>($stack18);

        $i3 = (int) i;

        $i4 = (int) $stack13;

        if $i3 != $i4 goto label1;

     label2:
        return;
    }

    public static final void printLongRanges(kotlin.ranges.LongRange)
    {
        long $stack15, $stack16, i, l1;
        byte $stack17, $stack23;
        int $i0;
        java.lang.String $stack13, $stack21;
        java.io.PrintStream $stack14, $stack22;
        kotlin.ranges.LongRange range;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack19, $stack20, $u0, $u1;

        range := @parameter0: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(range, "range");

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(range);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack14.<java.io.PrintStream: void println(java.lang.Object)>($stack13);

        $stack15 = virtualinvoke range.<kotlin.ranges.LongRange: long getFirst()>();

        l1 = $stack15;

        $stack16 = virtualinvoke range.<kotlin.ranges.LongRange: long getLast()>();

        $stack17 = $stack15 cmp $stack16;

        $i0 = (int) $stack17;

        if $i0 > 0 goto label2;

     label1:
        i = l1;

        l1 = l1 + 1L;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(i);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack22.<java.io.PrintStream: void print(java.lang.Object)>($stack21);

        $stack23 = i cmp $stack16;

        if $stack23 != 0 goto label1;

     label2:
        return;
    }

    public static final void printULongRanges(kotlin.ranges.ULongRange)
    {
        long $stack16, $stack17, l1, i;
        byte $stack25;
        int $stack18;
        java.lang.String $stack14, $stack20, $stack23;
        java.io.PrintStream $stack15, $stack24;
        kotlin.ranges.ULongRange range;
        java.lang.StringBuilder $stack10, $stack11, $stack12, $stack13, $stack19, $stack21, $stack22;

        range := @parameter0: kotlin.ranges.ULongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(range, "range");

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(range);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.Object)>($stack14);

        $stack16 = virtualinvoke range.<kotlin.ranges.ULongRange: long getFirst-s-VKNKU()>();

        l1 = $stack16;

        $stack17 = virtualinvoke range.<kotlin.ranges.ULongRange: long getLast-s-VKNKU()>();

        $stack18 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>($stack16, $stack17);

        if $stack18 > 0 goto label2;

     label1:
        i = l1;

        l1 = l1 + 1L;

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>(i);

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack24.<java.io.PrintStream: void print(java.lang.Object)>($stack23);

        $stack25 = i cmp $stack17;

        if $stack25 != 0 goto label1;

     label2:
        return;
    }

    public static final void printUIntRanges(kotlin.ranges.UIntRange)
    {
        int $stack12, $stack13, $stack14, l1, i;
        java.lang.String $stack10, $stack16, $stack19;
        java.io.PrintStream $stack11, $stack20;
        java.lang.StringBuilder $stack6, $stack7, $stack8, $stack9, $stack15, $stack17, $stack18;
        kotlin.ranges.UIntRange range;

        range := @parameter0: kotlin.ranges.UIntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(range, "range");

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*** ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(range);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ***");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.Object)>($stack10);

        $stack12 = virtualinvoke range.<kotlin.ranges.UIntRange: int getFirst-pVg5ArA()>();

        l1 = $stack12;

        $stack13 = virtualinvoke range.<kotlin.ranges.UIntRange: int getLast-pVg5ArA()>();

        $stack14 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($stack12, $stack13);

        if $stack14 > 0 goto label2;

     label1:
        i = l1;

        l1 = l1 + 1;

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = staticinvoke <kotlin.UInt: java.lang.String toString-impl(int)>(i);

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack20.<java.io.PrintStream: void print(java.lang.Object)>($stack19);

        if i != $stack13 goto label1;

     label2:
        return;
    }

    public static final void main()
    {
        kotlin.ranges.CharRange $stack6, $stack11;
        kotlin.ranges.ULongRange $stack8, $stack13;
        kotlin.ranges.LongRange $stack7, $stack12;
        kotlin.ranges.UIntRange $stack9, $stack14;
        kotlin.ranges.IntRange $stack5, $stack10;

        $stack5 = new kotlin.ranges.IntRange;

        specialinvoke $stack5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, 10);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printIntRanges(kotlin.ranges.IntRange)>($stack5);

        $stack6 = new kotlin.ranges.CharRange;

        specialinvoke $stack6.<kotlin.ranges.CharRange: void <init>(char,char)>(65, 90);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printCharRanges(kotlin.ranges.CharRange)>($stack6);

        $stack7 = new kotlin.ranges.LongRange;

        specialinvoke $stack7.<kotlin.ranges.LongRange: void <init>(long,long)>(1L, 10L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printLongRanges(kotlin.ranges.LongRange)>($stack7);

        $stack8 = new kotlin.ranges.ULongRange;

        specialinvoke $stack8.<kotlin.ranges.ULongRange: void <init>(long,long,kotlin.jvm.internal.DefaultConstructorMarker)>(1L, 10L, null);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printULongRanges(kotlin.ranges.ULongRange)>($stack8);

        $stack9 = new kotlin.ranges.UIntRange;

        specialinvoke $stack9.<kotlin.ranges.UIntRange: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(1, 10, null);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printUIntRanges(kotlin.ranges.UIntRange)>($stack9);

        $stack10 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(1, 10);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printIntRanges(kotlin.ranges.IntRange)>($stack10);

        $stack11 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.CharRange until(char,char)>(65, 90);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printCharRanges(kotlin.ranges.CharRange)>($stack11);

        $stack12 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.LongRange until(long,long)>(1L, 10L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printLongRanges(kotlin.ranges.LongRange)>($stack12);

        $stack13 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.ULongRange until-eb3DHEI(long,long)>(1L, 10L);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printULongRanges(kotlin.ranges.ULongRange)>($stack13);

        $stack14 = staticinvoke <kotlin.ranges.URangesKt: kotlin.ranges.UIntRange until-J1ME1BU(int,int)>(1, 10);

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void printUIntRanges(kotlin.ranges.UIntRange)>($stack14);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        staticinvoke <de.fraunhofer.iem.uniqueToKotlin.rangesAndProgressions.ranges.simpleExample.MainKt: void main()>();

        return;
    }
}
